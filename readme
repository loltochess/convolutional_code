# Convolutional Code 프로젝트

이 프로젝트는 임의의 5개의 오류가 포함된 convolutional_code로 인코딩된 1000비트 문자열을 Viterbi 알고리즘을 사용하여 원래 500비트 문자열로 디코딩하고, 디코딩된 문자열을 다시 인코딩하여 총 오류 개수와 오류 위치를 추론하는 과정을 담고 있습니다.

## 실행 순서

### 1. 컴파일

아래 명령어를 사용하여 프로젝트를 컴파일합니다. 컴파일된 실행 파일은 `bin` 폴더에 저장됩니다.

```bash
bash compile.sh
```

### 2. 실행

컴파일이 완료된 후, 다음 명령어를 사용하여 프로그램을 실행합니다. 입출력 파일의 경로는 고정되어 있으므로 반드시 아래 명령어를 사용하여 실행해 주세요.

```bash
./bin/conv_code
```

## 설명

### 1. 프로젝트 개요

이 프로젝트는 convolutional code를 사용하여 데이터 전송 과정에서 발생하는 오류를 수정하는 방법을 탐구합니다. Viterbi 알고리즘을 사용하여 디코딩하고, 디코딩된 데이터를 다시 인코딩하여 오류 위치를 추적합니다.

### 2. Viterbi 알고리즘

Viterbi 알고리즘은 convolutional code의 디코딩에 사용되는 알고리즘으로, 오류가 포함된 데이터 스트림에서 가장 가능성 있는 원래의 비트 스트림을 찾아냅니다.

### 3. 오류 추적

디코딩된 비트 스트림을 다시 인코딩하여 원래의 인코딩된 비트 스트림과 비교함으로써, 오류의 개수와 위치를 추적할 수 있습니다.

## 파일 구조

- `src/` - 소스 코드 디렉토리
- `bin/` - 컴파일된 실행 파일이 저장되는 디렉토리
- `compile.sh` - 컴파일 스크립트

## 요구사항

- C++ 컴파일러 (예: `g++`)
- Bash 쉘

## 예제

### 컴파일 및 실행

```bash
bash compile.sh
./bin/conv_code
```

이 명령어를 실행하면, 프로그램은 `bin` 폴더에 저장된 파일을 읽고, 디코딩 및 인코딩 과정을 수행한 후 결과를 출력합니다.
